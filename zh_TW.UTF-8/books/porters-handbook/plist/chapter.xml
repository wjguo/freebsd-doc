<?xml version="1.0" encoding="iso-8859-1"?>
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->

<chapter xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
  xml:id="plist">

  <title>Advanced <filename>pkg-plist</filename> Practices</title>

  <sect1 xml:id="plist-sub">
    <title>Changing <filename>pkg-plist</filename> Based on Make
      Variables</title>

    <para>Some ports, particularly the <literal>p5-</literal> ports,
      need to change their <filename>pkg-plist</filename> depending on
      what options they are configured with (or version of
      <literal>perl</literal>, in the case of <literal>p5-</literal>
      ports).  To make this easy, any instances in the
      <filename>pkg-plist</filename> of <literal>%%OSREL%%</literal>,
      <literal>%%PERL_VER%%</literal>, and
      <literal>%%PERL_VERSION%%</literal> will be substituted for
      appropriately.  The value of <literal>%%OSREL%%</literal> is the
      numeric revision of the operating system (e.g.,
      <literal>4.9</literal>).  <literal>%%PERL_VERSION%%</literal>
      and <literal>%%PERL_VER%%</literal> is the full version number
      of <command>perl</command> (e.g., <literal>5.8.9</literal>).
      Several other <literal>%%<replaceable>VARS</replaceable>%%</literal> related to port's
      documentation files are described in
      <link linkend="install-documentation">the relevant
	section</link>.</para>

    <para>If you need to make other substitutions, you can set the
      <varname>PLIST_SUB</varname> variable with a list of
      <literal><replaceable>VAR</replaceable>=<replaceable>VALUE</replaceable></literal> pairs and instances of
      <literal>%%<replaceable>VAR</replaceable>%%</literal> will be substituted with
      <replaceable>VALUE</replaceable> in the
      <filename>pkg-plist</filename>.</para>

    <para>For instance, if you have a port that installs many files
      in a version-specific subdirectory, you can put something
      like</para>

    <programlisting>OCTAVE_VERSION=	2.0.13
PLIST_SUB=	OCTAVE_VERSION=${OCTAVE_VERSION}</programlisting>

    <para>in the <filename>Makefile</filename> and use
      <literal>%%OCTAVE_VERSION%%</literal> wherever the version shows
      up in <filename>pkg-plist</filename>.  That way, when you
      upgrade the port, you will not have to change dozens (or in some
      cases, hundreds) of lines in the
      <filename>pkg-plist</filename>.</para>

    <para>If your port installs files conditionally on the options
      set in the port, the usual way of handling it is prefixing the
      <filename>pkg-plist</filename> lines with a
      <literal>%%OPT%%</literal> for lines needed when the option is
      enabled, or <literal>%%NO_OPT%%</literal> when the option is
      disabled, and adding <literal>OPTIONS_SUB=yes</literal> to the
      <filename>Makefile</filename>.  See <xref
	linkend="options_sub"/> for more information.</para>

    <para>For instance, if there are files that are only installed
      when the <literal>X11</literal> option is enabled, and the
      <filename>Makefile</filename> has:</para>

    <programlisting>OPTIONS_DEFINE=	X11
OPTIONS_SUB=	yes</programlisting>

    <para>In the <filename>pkg-plist</filename> file, put
      <literal>%%X11%%</literal> in front of the lines only being
      installed when the option is enabled, like this :</para>

    <programlisting>%%X11%%bin/foo-gui</programlisting>

    <para>This substitution will be done between the
      <buildtarget>pre-install</buildtarget> and
      <buildtarget>do-install</buildtarget> targets, by reading from
      <filename>PLIST</filename> and writing to
      <filename>TMPPLIST</filename> (default:
      <filename>WRKDIR/.PLIST.mktmp</filename>).  So if your port
      builds <filename>PLIST</filename> on the fly, do so in or before
      <buildtarget>pre-install</buildtarget>.  Also, if your port
      needs to edit the resulting file, do so in
      <buildtarget>post-install</buildtarget> to a file named
      <filename>TMPPLIST</filename>.</para>

    <para>Another way of modifying a port's packing list is based on
      setting the variables <varname>PLIST_FILES</varname>,
      <varname>PLIST_DIRS</varname>, and
      <varname>PLIST_DIRSTRY</varname>.  The value of each variable is
      regarded as a list of pathnames to write to
      <filename>TMPPLIST</filename> along with
      <filename>PLIST</filename> contents.  Names listed in
      <varname>PLIST_FILES</varname>, <varname>PLIST_DIRS</varname>,
      and <varname>PLIST_DIRSTRY</varname> are subject to
      <literal>%%<replaceable>VAR</replaceable>%%</literal> substitution as described above.
      Except for that, names from <varname>PLIST_FILES</varname> will
      appear in the final packing list unchanged, while
      <literal>@dirrm</literal> and <literal>@dirrmtry</literal> will
      be prepended to names from <varname>PLIST_DIRS</varname> and
      <varname>PLIST_DIRSTRY</varname>, respectively.  To take effect,
      <varname>PLIST_FILES</varname>, <varname>PLIST_DIRS</varname>,
      and <varname>PLIST_DIRSTRY</varname> must be set before
      <filename>TMPPLIST</filename> is written, i.e., in
      <buildtarget>pre-install</buildtarget> or earlier.</para>

    <para>From time to time, the <varname>OPTIONS_SUB</varname>
      construct is not enough, in those cases, adding a specific
      <literal>TAG</literal> to the <varname>PLIST_SUB</varname>
      variable inside the <filename>Makefile</filename> with a special
      value of <literal>@comment</literal>, makes package tools to
      ignore the line.  For instance, if some files are only installed
      when the <literal>X11</literal> option is on and the
      architecture is <literal>i386</literal>:</para>

    <programlisting>.include &lt;bsd.port.pre.mk&gt;

.if ${PORT_OPTIONS:MX11} &amp;&amp; ${ARCH} == "i386"
PLIST_SUB+=	X11I386=""
.else
PLIST_SUB+=	X11I386="@comment "
.endif</programlisting>

  </sect1>

  <sect1 xml:id="plist-cleaning">
    <title>Empty Directories</title>

    <sect2 xml:id="plist-dir-cleaning">
      <title>Cleaning Up Empty Directories</title>

      <para>When being de-installed, A port has to remove empty
	directories it created.  This is usually accomplished by
	adding <literal>@dirrm</literal> lines for all directories
	that are specifically created by the port.  You need to delete
	subdirectories before you can delete parent
	directories.</para>

      <programlisting> :
lib/X11/oneko/pixmaps/cat.xpm
lib/X11/oneko/sounds/cat.au
 :
@dirrm lib/X11/oneko/pixmaps
@dirrm lib/X11/oneko/sounds
@dirrm lib/X11/oneko</programlisting>

      <para>However, sometimes <literal>@dirrm</literal> will give
	you errors because other ports share the same directory.  You
	can use <literal>@dirrmtry</literal> to remove only empty
	directories without warning.</para>

      <programlisting>@dirrmtry share/doc/gimp</programlisting>

      <para>This will neither print any error messages nor cause
	<command>pkg delete</command> (see &man.pkg-delete.8;) to
	exit abnormally even if
	<filename>${PREFIX}/share/doc/gimp</filename> is not empty
	due to other ports installing some files in there.</para>
    </sect2>

    <sect2 xml:id="plist-dir-empty">
      <title>Creating Empty Directories</title>

      <para>Empty directories created during port installation need
	special attention.  They will not get created when installing
	the package, because packages only store the files, and both
	<command>pkg add</command> and <command>pkg install</command>
	creates directories for them as needed.  To make sure the
	empty directory is created when installing the package, add
	this line to <filename>pkg-plist</filename> above the
	corresponding <literal>@dirrm</literal> line:</para>

	<programlisting>@exec mkdir -p %D/share/foo/templates</programlisting>
    </sect2>
  </sect1>

  <sect1 xml:id="plist-config">
    <title>Configuration Files</title>

    <para>If your port installs configuration files to
      <filename>PREFIX/etc</filename> (or elsewhere) do
      <emphasis>not</emphasis> simply list them in the
      <filename>pkg-plist</filename>.  That will cause
      <command>pkg delete</command> to remove the files carefully
      edited by the user, and a re-installation will wipe them
      out.</para>

    <para>Instead, install sample file(s) as
      <filename><replaceable>filename</replaceable>.sample</filename>,
      and for each sample file, add this line to your
      <filename>pkg-plist</filename>.</para>

    <programlisting>@sample etc/orbit.conf.sample</programlisting>

    <para>If there is a very good reason not to install a working
      configuration file by default, only list the sample filename in
      <filename>pkg-plist</filename>, without the <literal>@sample
	</literal> part, and add a <link
	linkend="porting-message">message</link> pointing out that the
      user must copy and edit the file before the software will
      work.</para>

    <tip>
      <para>When a port installs its configuration in a subdirectory
	of <filename>${PREFIX}/etc</filename>, it should be in
	<varname>ETCDIR</varname>, which defaults to
	<literal>${PREFIX}/etc/${PORTNAME}</literal>, it can be
	overridden in the ports <filename>Makefile</filename> if there
	is a convention for the port to use some other directory.  The
	<literal>%%ETCDIR%%</literal> macro should be used in its
	stead in the <filename>pkg-plist</filename> file.</para>
    </tip>

    <note>
      <para>The sample configuration files should always have the
	<filename>.sample</filename> suffix.  If for some historical
	reason you cannot use the standard suffix, you can still use
	this construct:</para>

      <programlisting>@unexec if cmp -s %D/etc/orbit.conf-dist %D/etc/orbit.conf; then rm -f %D/etc/orbit.conf; fi
etc/orbit.conf-dist
@exec if [ ! -f %D/etc/orbit.conf ] ; then cp -p %D/%F %B/orbit.conf; fi</programlisting>

      <para>The order of these lines is important.  On deinstallation,
	the sample file is compared to the actual configuration file.
	If these files are identical, no changes have been made by the
	user and the actual file can be safely deleted.  Because the
	sample file must still exist for the comparison, the
	<literal>@unexec</literal> line comes before the sample
	configuration file name.  On installation, if an actual
	configuration file is not already present, the sample file is
	copied to the actual file.  The sample file must be present
	before it can be copied, so the <literal>@exec</literal> line
	comes after the sample configuration file name.</para>

      <para>To debug any issues, temporarily remove the
	<literal>-s</literal> flag to &man.cmp.1; for more
	output.</para>

      <para>See &man.pkg-create.8; for more information on
	<literal>%D</literal> and related substitution markers.</para>
    </note>
  </sect1>

  <sect1 xml:id="plist-dynamic">
    <title>Dynamic Versus Static Package List</title>

    <para>A <emphasis>static package list</emphasis> is a package
      list which is available in the Ports Collection either as a
      <filename>pkg-plist</filename> file (with or without variable
      substitution), or embedded into the
      <filename>Makefile</filename> via
      <varname>PLIST_FILES</varname>, <varname>PLIST_DIRS</varname>,
      and <varname>PLIST_DIRSTRY</varname>.  Even if the contents are
      auto-generated by a tool or a target in the Makefile
      <emphasis>before</emphasis> the inclusion into the Ports
      Collection by a committer (e.g., using <command>make
	makeplist></command>), this is still considered a static list,
      since it is possible to examine it without having to download or
      compile the distfile.</para>

    <para>A <emphasis>dynamic package list</emphasis> is a package
      list which is generated at the time the port is compiled based
      upon the files and directories which are installed.  It is not
      possible to examine it before the source code of the ported
      application is downloaded and compiled, or after running a
      <literal>make clean</literal>.</para>

    <para>While the use of dynamic package lists is not forbidden,
      maintainers should use static package lists wherever possible,
      as it enables users to &man.grep.1; through available ports to
      discover, for example, which port installs a certain file.
      Dynamic lists should be primarily used for complex ports where
      the package list changes drastically based upon optional
      features of the port (and thus maintaining a static package list
      is infeasible), or ports which change the package list based
      upon the version of dependent software used (e.g., ports which
      generate docs with <application>Javadoc</application>).</para>
  </sect1>

  <sect1 xml:id="plist-autoplist">
    <title>Automated Package List Creation</title>

    <para>First, make sure the port is almost complete, with only
      <filename>pkg-plist</filename> missing.  Running <command>make
	makeplist</command> will show what should be put in
      <filename>pkg-plist</filename>.  The output of
      <buildtarget>makeplist</buildtarget> must be double checked for
      correctness as it tries to automatically guess a few things, and
      can get it wrong.</para>

    <para>User configuration files should be installed as
      <filename><replaceable>filename</replaceable>.sample</filename>, as it is described in
      <xref linkend="plist-config"/>.  The
      <filename>info/dir</filename> file should not be listed and
      appropriate <filename>install-info</filename> lines should be
      added as noted in the
      <link linkend="makefile-info">info files</link> section.  Any
      libraries installed by the port should be listed as specified in
      the <link linkend="porting-shlibs">shared libraries</link>
      section.</para>
  </sect1>

  <sect1 xml:id="plist-keywords">
    <title>Expanding Package List with Keywords</title>

    <!-- Try and keep the keywords alphanumerically sorted -->

    <sect2 xml:id="plist-keywords-fc">
      <title><literal>@fc</literal>
	<replaceable>directory</replaceable></title>

      <para>Add a <literal>@dirrmtry</literal> entry for the
	directory passed as an argument, and run <command>fc-cache
	  -s</command> on that directory after installation and
	deinstallation.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-fcfontsdir">
      <title><literal>@fcfontsdir</literal>
	<replaceable>directory</replaceable></title>

      <para>Add a <literal>@dirrmtry</literal> entry for the
	directory passed as an argument, and run <command>fc-cache
	  -s</command>, <command>mkfontscale</command> and
	<command>mkfontdir</command> on that directory after
	installation and deinstallation.  Additionally, on
	deinstallation, it removes the
	<filename>fonts.scale</filename> and
	<filename>fonts.dir</filename> cache files if they are
	empty.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-fontsdir">
      <title><literal>@fontsdir</literal>
	<replaceable>directory</replaceable></title>

      <para>Add a <literal>@dirrmtry</literal> entry for the
	directory passed as an argument, and run
	<command>mkfontscale</command> and
	<command>mkfontdir</command> on that directory after
	installation and deinstallation.  Additionally, on
	deinstallation, it removes the
	<filename>fonts.scale</filename> and
	<filename>fonts.dir</filename> cache files if they are
	empty.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-info">
      <title><literal>@info</literal>
	<replaceable>file</replaceable></title>

      <para>Add the file passed as argument to the plist, and updates
	the info document index on installation and deinstallation.
	Additionally, it removes the index if empty on
	deinstallation.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-sample">
      <title><literal>@sample</literal>
	<replaceable>file</replaceable></title>

      <para>Add the file passed as argument to the plist.</para>

      <para>On installation, check for a <quote>real</quote> file with
	just the base name (the name without the
	<filename>.sample</filename> extension).  If the real file is
	not found, copy the sample file to the base file name.  On
	deinstallation, remove the configuration file if it has not
	been modified.  See <xref linkend="plist-config"/> for more
	information.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-shell">
      <title><literal>@shell</literal>
	<replaceable>file</replaceable></title>

      <para>Add the file passed as argument to the plist.</para>

      <para>On installation, add the full path to
	<replaceable>file</replaceable> to
	<filename>/etc/shells</filename>, while making sure it is not
	added twice.  On deinstallation, remove it from
	<filename>/etc/shells</filename>.</para>
    </sect2>

    <sect2 xml:id="plist-keywords-base">
      <title>Base Keywords</title>

      <para>There are a few historic keywords that are hardcoded, and
	documented in &man.pkg-create.8;.  For the sake of
	completeness, they are also documented here.</para>

      <sect3 xml:id="plist-keywords-base-cwd">
	<title><literal>@cwd</literal>
	  [<replaceable>directory</replaceable>]</title>

	<para>Set the internal directory pointer to point to
	  directory.  All subsequent filenames are assumed relative to
	  this directory.</para>
      </sect3>

      <sect3 xml:id="plist-keywords-base-exec">
	<title><literal>@exec</literal>
	  <replaceable>command</replaceable></title>

	<para>Execute <replaceable>command</replaceable> as part of
	  the unpacking process.  If command contains any of the
	  following sequences somewhere in it, they are expanded
	  inline.  For the following examples, assume that
	  <literal>@cwd</literal> is set to <filename
	    class="directory">/usr/local</filename> and the last
	  extracted file was <filename>bin/emacs</filename>.</para>

	<variablelist>
	  <varlistentry>
	    <term><literal>%F</literal></term>

	    <listitem>
	      <para>Expand to the last filename extracted (as
		specified).  In the example case
		<filename>bin/emacs</filename>.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><literal>%D</literal></term>
	    <listitem>
	      <para>Expand to the current directory prefix, as set
		with <literal>@cwd</literal>.  In the example case
		<filename
		  class="directory">/usr/local</filename>.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><literal>%B</literal></term>

	    <listitem>
	      <para>Expand to the basename of the fully qualified
		filename, that is, the current directory prefix plus
		the last filespec, minus the trailing filename.  In
		the example case, that would be <filename
		  class="directory">/usr/local/bin</filename>.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term><literal>%f</literal></term>

	    <listitem>
	      <para>Expand to the filename part of the fully qualified
		name, or the converse of <literal>%B</literal>.  In
		the example case,
		<filename>emacs</filename>.</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </sect3>

      <sect3 xml:id="plist-keywords-base-unexec">
	<title><literal>@unexec</literal>
	  <replaceable>command</replaceable></title>

	<para>Execute <replaceable>command</replaceable> as part of
	  the deinstallation process.  Expansion of special
	  <literal>%</literal> sequences is the same as for
	  <literal>@exec</literal>.  This command is not executed
	  during the package add, as <literal>@exec</literal> is, but
	  rather when the package is deleted.  This is useful for
	  deleting links and other ancillary files that were created
	  as a result of adding the package, but not directly known to
	  the package's table of contents (and hence not automatically
	  removable).</para>
      </sect3>

      <sect3 xml:id="plist-keywords-base-mode">
	<title><literal>@mode</literal>
	  <replaceable>mode</replaceable></title>

	<para>Set default permission for all subsequently extracted
	  files to <replaceable>mode</replaceable>.  Format is the
	  same as that used by &man.chmod.1;.  Use without an arg to
	  set back to default permissions (mode of the file while
	  being packed).</para>
      </sect3>

      <sect3 xml:id="plist-keywords-base-owner">
	<title><literal>@owner</literal>
	  <replaceable>user</replaceable></title>

	<para>Set default ownership for all subsequent files to
	  <replaceable>user</replaceable>.  Use without an argument to
	  set back to default ownership (<systemitem
	    class="username">root</systemitem>).</para>
      </sect3>

      <sect3 xml:id="plist-keywords-base-group">
	<title><literal>@group</literal>
	  <replaceable>group</replaceable></title>

	<para>Set default group ownership for all subsequent files to
	  <replaceable>group</replaceable>.  Use without an arg to set
	  back to default group ownership (<systemitem
	    class="groupname">wheel</systemitem>).</para>
      </sect3>

      <sect3 xml:id="plist-keywords-base-comment">
	<title><literal>@comment</literal>
	  <replaceable>string</replaceable></title>

	<para>This line is ignored when packing.</para>
      </sect3>

      <sect3 xml:id="plist-keywords-base-dirrm">
	<title><literal>@dirrm</literal>
	  <replaceable>directory</replaceable></title>

	<para>Declare directory name to be deleted at deinstall time.
	  By default, directories created by a package installation
	  are not deleted when the package is deinstalled.  This
	  provides an explicit directory cleanup method.  These
	  directives should appear at the end of the package list.  If
	  the directory is not empty a warning is printed, and the
	  directory is not removed.</para>
      </sect3>

      <sect3 xml:id="plist-keywords-base-dirrmtry">
	<title><literal>@dirrmtry</literal>
	  <replaceable>directory</replaceable></title>

	<para>Declare directory name to be removed, as for
	  <literal>@dirrm</literal>, but does not issue a warning if
	  the directory cannot be removed.</para>
      </sect3>
    </sect2>

    <sect2 xml:id="plist-keywords-your-own">
      <title>Creating Your Own Keyword</title>

      <para>Package list files can be extended by keywords that are
	defined in the <filename
	  class="directory">${PORTSDIR}/Keywords</filename> directory.
	The settings for each keyword lives in a
	<acronym>YAML</acronym> file named
	<filename><replaceable>keyword</replaceable>.yaml</filename>.
	The file must contain at least one of the following
	sections:</para>

      <variablelist>
	<varlistentry xml:id="plist-keywords-attributes">
	  <term><literal>attributes</literal></term>

	  <listitem>
	    <para>Changes the owner, group, or mode used by the
	      keyword.  Contains an associative array where the
	      possible keys are <literal>owner</literal>,
	      <literal>group</literal>, and <literal>mode</literal>.
	      The values are, respectively, a user name, a group name,
	      and a file mode.  For example:</para>

	    <programlisting>attributes: { owner: "games", group: "games", mode: 0555 }</programlisting>
	  </listitem>
	</varlistentry>

	<varlistentry xml:id="plist-keywords-action">
	  <term><literal>action</literal></term>

	  <listitem>
	    <para>Defines what happens to the keyword's parameter.
	      Contains an array where the possible values are:</para>

	    <variablelist>
	      <varlistentry>
		<term><literal>setprefix</literal></term>

		<listitem>
		  <para>Set the prefix for the next plist
		    entries.</para>
		</listitem>
	      </varlistentry>

	      <varlistentry>
		<term><literal>dirrm</literal></term>

		<listitem>
		  <para>Register a directory to be deleted on
		    deinstall.</para>
		</listitem>
	      </varlistentry>

	      <varlistentry>
		<term><literal>dirrmtry</literal></term>

		<listitem>
		  <para>Register a directory to try and deleted on
		    deinstall.</para>
		</listitem>
	      </varlistentry>

	      <varlistentry>
		<term><literal>file</literal></term>

		<listitem>
		  <para>Register a file.</para>
		</listitem>
	      </varlistentry>

	      <varlistentry>
		<term><literal>setmode</literal></term>

		<listitem>
		  <para>Set the mode for the next plist
		    entries.</para>
		</listitem>
	      </varlistentry>

	      <varlistentry>
		<term><literal>setowner</literal></term>

		<listitem>
		  <para>Set the owner for the next plist
		    entries.</para>
		</listitem>
	      </varlistentry>

	      <varlistentry>
		<term><literal>setgroup</literal></term>

		<listitem>
		  <para>Set the group for the next plist
		    entries.</para>
		</listitem>
	      </varlistentry>

	      <varlistentry>
		<term><literal>comment</literal></term>

		<listitem>
		  <para>Does not do anything, equivalent to not
		    entering an <literal>action</literal>
		    section.</para>
		</listitem>
	      </varlistentry>

	      <varlistentry>
		<term><literal>ignore_next</literal></term>

		<listitem>
		  <para>Ignore the next entry in the plist.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</varlistentry>

	<varlistentry xml:id="plist-keywords-pre-post">
	  <term><literal>pre-install</literal></term>
	  <term><literal>post-install</literal></term>
	  <term><literal>pre-deinstall</literal></term>
	  <term><literal>post-deinstall</literal></term>
	  <term><literal>pre-upgrade</literal></term>
	  <term><literal>post-upgrade</literal></term>

	  <listitem>
	    <para>These keywords contains a &man.sh.1; script to be
	      executed before or after installation, deinstallation,
	      or upgrade of the package.  In addition to the usual
	      <literal>@exec</literal>
	      <literal>%<replaceable>foo</replaceable></literal>
	      placeholders described in <xref
		linkend="plist-keywords-base-exec"/>, there is a new
	      one, <literal>%@</literal>, which represents the
	      argument of the keyword.</para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <example xml:id="plist-keywords-fc-example">
	<title>Example of a <literal>@dirrmtryecho</literal>
	  Keyword</title>

	<para>This keyword does two things, it adds a
	  <literal>@dirrmtry
	    <replaceable>directory</replaceable></literal> line to the
	  packing list, and echoes the fact that the directory is
	  removed when deinstalling the package.</para>

	<programlisting>actions: [dirrmtry]
post-deinstall: |
  echo "Directory %D/%@ removed."</programlisting>
      </example>

      <example xml:id="plist-keywords-sample-example">
	<title>Real Life Example, How the <literal>@sample</literal>
	  Could be Implemented</title>

	<para>This keyword does three things, it adds the
	  <replaceable>filename</replaceable> passed as an argument to
	  <literal>@sample</literal> to the packing list, it adds to
	  the <literal>post-install</literal> script instructions to
	  copy the sample to the actual configuration file if it does
	  not already exist, and it adds to the
	  <literal>post-deinstall</literal> instructions to remove the
	  configuration file if it has not been modified.</para>

	<programlisting>actions: [file]
post-install: |
  sample_file="%D/%@"
  target_file="${sample_file%.sample}"
  if ! [ -f "${target_file}" ]; then
    /bin/cp -p "${sample_file}" "${target_file}"
  fi
pre-deinstall: |
  sample_file="%D/%@"
  target_file="${sample_file%.sample}"
  if cmp -s "${target_file}" "${sample_file}"; then
    rm -f "${target_file}"
  fi</programlisting>
      </example>
    </sect2>
  </sect1>
</chapter>
